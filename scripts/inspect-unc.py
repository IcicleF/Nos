#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Generated by ChatGPT.

import os, re, sys, glob
from datetime import datetime
from typing import Tuple
import pandas as pd
import numpy as np


def collect_dir(exp: str) -> Tuple[float, float, pd.Series]:
    '''
    Collect csv-format performance dumps from a directory.

    ### Args:
        `exp`: Absolute path to the experiment data directory.

    ### Returns:
        (thpt_max, thpt_mean, latencies)    
    '''
    
    throughputs = []
    latencies = []

    for f in glob.glob(f'{exp}/*.csv'):
        df = pd.read_csv(f)
        
        # Drop the first and the last row
        df.drop(df.head(1).index, inplace=True)
        df.drop(df.tail(1).index, inplace=True)

        # Get throughput data, pending merge
        throughput = df['throughput'].sort_index(ascending=False).reset_index(drop=True)

        # Get latency data, merge instantly
        latency = df[['get_avg', 'get_p50', 'get_p99', 'get_p999', 'put_avg', 'put_p50', 'put_p99', 'put_p999']]
        latency = latency.mean(axis=0)
        
        throughputs.append(throughput)
        latencies.append(latency)
    
    if len(throughputs) == 0 or len(latencies) == 0:
        raise Exception("No data found")

    # Merge throughputs into a table
    throughput_table = pd.concat(throughputs, axis=1).sort_index(ascending=False).reset_index(drop=True).replace(np.nan, 0)
    throughputs = throughput_table.sum(axis=1).astype("int") / 1e6

    # Merge latencies
    latency_table = pd.concat(latencies, axis=1)
    # print(exp, latency_table)
    latencies = latency_table.mean(axis=1).astype("int") / 1e3
    return throughputs.max(), throughputs.mean(), latencies


def main():
    SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
    uncollected_dir = os.path.join(SCRIPT_DIR, '../data/uncollected')

    if not os.path.isdir(uncollected_dir):
        print(f"Directory {uncollected_dir} does not exist.", file=sys.stderr)
        sys.exit(1)

    timestamp_pattern = re.compile(r'^(.*)-(\d{8}-\d{6})$')

    candidates = []
    for entry in os.listdir(uncollected_dir):
        full_path = os.path.join(uncollected_dir, entry)
        if os.path.isdir(full_path):
            match = timestamp_pattern.match(entry)
            if match:
                prefix, timestamp_str = match.groups()
                try:
                    timestamp = datetime.strptime(timestamp_str, "%Y%m%d-%H%M%S")
                    candidates.append((prefix, timestamp, entry))
                except ValueError:
                    pass  # Skip invalid timestamp formats

    if not candidates:
        print("No experiment records found.", file=sys.stderr)
        sys.exit(0)

    # Sort by timestamp descending (latest first)
    candidates.sort(key=lambda x: x[1], reverse=True)

    # Display options
    print("Available experiment records:")
    for idx, (prefix, timestamp, _) in enumerate(candidates):
        print(f"[{idx}] Workload: {prefix}  |  Timestamp: {timestamp.strftime('%Y-%m-%d %H:%M:%S')}")

    try:
        choice = input(f"Select an experiment by ID (default 0): ").strip()
        if choice == '':
            idx = 0
        else:
            idx = int(choice)
        if idx < 0 or idx >= len(candidates):
            raise ValueError
    except ValueError:
        print("Invalid selection.", file=sys.stderr)
        sys.exit(1)

    selected_dir = os.path.join(uncollected_dir, candidates[idx][2])
    print()
    print(f"Selected experiment record: {selected_dir}")

    throughput, _, _ = collect_dir(selected_dir)
    print(f"Throughput: {throughput:.2f} Mops/s")


if __name__ == "__main__":
    main()
