use std::path::Path;
use std::sync::Arc;

use anyhow::Result;
use serde::Deserialize;

use crate::workload::trace::*;

/// Distribution of key access in a workload.
#[derive(Debug, Clone, Deserialize, PartialEq)]
#[serde(rename_all = "lowercase")]
pub enum WorkloadDistribution {
    /// Uniform distribution.
    Uniform,

    /// Zipfian distribution.
    Zipf(f32),
}

/// Proportion of different kinds of operations in a workload.
#[derive(Debug, Clone, Copy, Deserialize)]
pub struct WorkloadProportion {
    pub insert: f32,
    pub read: f32,
    pub update: f32,
}

/// Workload specification.
#[derive(Clone, Deserialize)]
pub struct Workload {
    /// Identifier of the workload.
    /// Automatically generated from the file name and no need to specify in the config file.
    /// This will be used in the name of the performance stat output file.
    #[serde(skip)]
    pub ident: String,

    /// Name of the workload.
    pub name: String,

    /// Trace file path.
    /// If set, the workload will be generated from the trace file, and other settings will be ignored.
    ///
    /// # Special variables
    ///
    /// - `$HOME`: will be replaced with the value of the `HOME` environment variable.
    pub trace: Option<String>,

    #[serde(skip)]
    /// Trace content.
    pub trace_content: Option<Arc<Trace>>,

    /// Value size in bytes.
    /// If `value_pattern` is specified, this field will have different meanings.
    pub value_size: usize,

    /// Value size distribution pattern.
    /// If specified, `value_size` will have different meanings.
    ///
    /// Possible values:
    /// - `etc`: Facebook ETC distribution. `value_size` is the largest value size.
    pub value_pattern: Option<String>,

    /// Number of keys in the workload.
    pub count: usize,

    /// Duration in seconds to run.
    pub duration: u64,

    /// Distribution of key access.
    ///
    /// Has special meaning if the workload is generated from a trace file.
    /// In this case, `insert = 1` populates the workload, and `read = 1` runs the actual workload.
    pub distribution: WorkloadDistribution,

    /// Proportion of different kinds of operations.
    pub proportion: WorkloadProportion,

    /// Nodes regarded as failed.
    /// This will be ignored in record preparation stage but effective in workload running stage.
    pub faults: Option<Vec<usize>>,
}

impl Workload {
    /// Deserialize a workload from a TOML file.
    pub fn load_toml(path: impl AsRef<Path>) -> Result<Self> {
        let ident = path
            .as_ref()
            .file_stem()
            .unwrap()
            .to_str()
            .unwrap()
            .to_owned();
        let wl = std::fs::read_to_string(path)?;
        let mut wl = toml::from_str::<Self>(&wl)?;
        wl.ident = ident;

        // Check Zipfian distribution.
        if let WorkloadDistribution::Zipf(alpha) = wl.distribution {
            assert!(alpha >= 0.0f32, "Zipf alpha must be non-negative");
            if alpha > 1.0f32 {
                log::warn!(
                    "specified Zipf alpha {} > 1.0, the distribution is not long-tail!",
                    alpha
                );
            }
        }

        // Load trace.
        if let Some(ref trace) = wl.trace {
            // Replace special path variables.
            let trace = substitute_env_vars(trace.clone());
            let is_prepare = wl.proportion.insert == 1.0;
            log::info!(
                "this is {}.",
                if is_prepare { "preparation" } else { "replay" }
            );

            wl.trace_content = Some(Arc::new(Trace::load(&trace, is_prepare)?));
        }

        Ok(wl)
    }
}

/// Replaces substrings like "$VAR" or "${VAR}" with the value of the
/// corresponding environment variable "VAR". Generated by Gemini 2.5.
///
/// The variable name (VAR) must consist of one or more alphanumeric
/// characters or underscores (`_`). The matching is greedy,
/// meaning it takes the longest possible valid variable name.
///
/// # Arguments
///
/// * `input` - The input string possibly containing environment variable placeholders.
///
/// # Returns
///
/// A new `String` with all valid placeholders replaced by their corresponding
/// environment variable values.
///
/// # Panics
///
/// This function will panic if any of the matched environment variable placeholders
/// (`$VAR` or `${VAR}`) corresponds to an environment variable that is not set
/// or cannot be read. The panic message will indicate the name of the missing variable.
fn substitute_env_vars(input: String) -> String {
    use regex::{Captures, Regex};
    use std::env;

    // Regex explanation:
    // \$                     Match a literal dollar sign
    // (                      Start of capturing group 1 (for $VAR)
    //   [a-zA-Z0-9_]+        Match one or more valid characters (alphanumeric, _)
    // )                      End of capturing group 1
    // |                      OR
    // \$\{                   Match literal "${"
    // (                      Start of capturing group 2 (for ${VAR})
    //   [a-zA-Z0-9_]+        Match one or more valid characters (alphanumeric, _)
    // )                      End of capturing group 2
    // \}                     Match literal "}"
    //
    // Using lazy_static or once_cell here could improve performance if called frequently,
    // by compiling the regex only once. For simplicity, we compile it on each call here.
    let re = Regex::new(r"\$([a-zA-Z0-9_]+)|\$\{([a-zA-Z0-9_]+)\}").unwrap(); // Safe unwrap for a valid static regex

    // Use replace_all with a closure to perform the lookup and replacement
    let result = re.replace_all(&input, |caps: &Captures| {
        // Determine which capture group matched (group 1 for $VAR, group 2 for ${VAR})
        // If group 1 matched `caps.get(1)` is Some, otherwise `caps.get(2)` should be Some.
        let var_name = caps
            .get(1) // Try group 1 first ($VAR)
            .or_else(|| caps.get(2)) // Fallback to group 2 (${VAR})
            .map(|m| m.as_str()) // Get the matched string slice
            .expect("Regex matched but no group captured name. This shouldn't happen."); // Should be logically impossible

        // Look up the environment variable
        // Panic if the variable is not found, as per requirement.
        env::var(var_name).unwrap_or_else(|err| {
            panic!(
                "Environment variable not found: '{}'. Error: {}",
                var_name, err
            )
        })
    });

    // replace_all returns a Cow<str>, convert it to an owned String
    result.into_owned()
}
